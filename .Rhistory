?inverse
?inversematrix
?matrix
m<- matrix(c(-1,-2,1,1),2,2)
x<-makeCacheMatrix(m)
source('~/school/Summer2015/ProgrammingAssignment2/cachematrix.R')
x<-makeCacheMatrix(m)
x$get()
inv<-cacheSolve(x)
source('~/school/Summer2015/ProgrammingAssignment2/cachematrix.R')
inv<-cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## The makeCacheMatrix creates a special "matrix" object that can
##  cache its inverse.
## The cacheSolve function computes the inverse of the special
##  "matrix".If the inverse has already been calculated (and the
##  matrix has not changed), then the cache solve should retreive
##  the inverse from the cache.
## Basically the function creates a matrix that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<- function(y){
x<<- y
m<<- NULL
}
get <- function()x
setinverse<-function(solve) i <<- solve
getinverse<-function() i
list(set=set, get=get,
setinverse = setinverse,
getinverse=getinverse)
}
## The cacheSolve function computes the inverse of the special
## "matrix" returned by the makeCacheMatrix function. If the inverse
## has already been calculated, then the function will retrieve
## the inverse from the cache.
cacheSolve <- function(x, ...) {
i<-x$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data<-x$get()
i<-solve(data,...)
x$setinverse(i)
i
## Return a matrix that is the inverse of 'x'
}
x$get()
inv <- cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## The makeCacheMatrix creates a special "matrix" object that can
##  cache its inverse.
## The cacheSolve function computes the inverse of the special
##  "matrix".If the inverse has already been calculated (and the
##  matrix has not changed), then the cache solve should retreive
##  the inverse from the cache.
## Basically the function creates a matrix that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<- function(y){
x<<- y
m<<- NULL
}
get <- function()x
setinverse<-function(solve) i <<- solve
getinverse<-function() i
list(set=set, get=get,
setinverse = setinverse,
getinverse=getinverse)
}
## The cacheSolve function computes the inverse of the special
## "matrix" returned by the makeCacheMatrix function. If the inverse
## has already been calculated, then the function will retrieve
## the inverse from the cache.
cacheSolve <- function(x, ...) {
i<-x$getmean()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data<-x$get()
i<-mean(data,...)
x$setinverse(i)
i
## Return a matrix that is the inverse of 'x'
}
inv <- cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## The makeCacheMatrix creates a special "matrix" object that can
##  cache its inverse.
## The cacheSolve function computes the inverse of the special
##  "matrix".If the inverse has already been calculated (and the
##  matrix has not changed), then the cache solve should retreive
##  the inverse from the cache.
## Basically the function creates a matrix that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<- function(y){
x <<- y
i <<- NULL
}
get <- function()x
setinverse<-function(solve) i <<- solve
getinverse<-function() i
list(set=set, get=get,
setinverse = setinverse,
getinverse=getinverse)
}
## The cacheSolve function computes the inverse of the special
## "matrix" returned by the makeCacheMatrix function. If the inverse
## has already been calculated, then the function will retrieve
## the inverse from the cache.
cacheSolve <- function(x, ...) {
i<-x$getmean()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data<-x$get()
i<-mean(data,...)
x$setinverse(i)
i
## Return a matrix that is the inverse of 'x'
}
m <- matrix(c(-1,-2,1,1),2,2)
x<-makeCacheMatrix(m)
x$get()
inv<-cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## The makeCacheMatrix creates a special "matrix" object that can
##  cache its inverse.
## The cacheSolve function computes the inverse of the special
##  "matrix".If the inverse has already been calculated (and the
##  matrix has not changed), then the cache solve should retreive
##  the inverse from the cache.
## Basically the function creates a matrix that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<- function(y){
x <<- y
i <<- NULL
}
get <- function()x
setinverse<-function(solve) i <<- solve
getinverse<-function() i
list(set=set, get=get,
setinverse = setinverse,
getinverse=getinverse)
}
## The cacheSolve function computes the inverse of the special
## "matrix" returned by the makeCacheMatrix function. If the inverse
## has already been calculated, then the function will retrieve
## the inverse from the cache.
cacheSolve <- function(x, ...) {
i<-x$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data<-x$get()
i<-inverse(data,...)
x$setinverse(i)
i
## Return a matrix that is the inverse of 'x'
}
x<-makeCacheMatrix(m)
x$get()
inv<-cacheSolve(x)
i<-matrix(c(-1,-2,1,1),2,2)
x<-makeCacheMatrix(i)
x$get()
inv<-cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
## Put comments here that give an overall description of what your
## functions do
## The makeCacheMatrix creates a special "matrix" object that can
##  cache its inverse.
## The cacheSolve function computes the inverse of the special
##  "matrix".If the inverse has already been calculated (and the
##  matrix has not changed), then the cache solve should retreive
##  the inverse from the cache.
## Basically the function creates a matrix that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<- function(y){
x <<- y
i <<- NULL
}
get <- function()x
setinverse<-function(solve) i <<- solve
getinverse<-function() i
list(set=set, get=get,
setinverse = setinverse,
getinverse=getinverse)
}
## The cacheSolve function computes the inverse of the special
## "matrix" returned by the makeCacheMatrix function. If the inverse
## has already been calculated, then the function will retrieve
## the inverse from the cache.
cacheSolve <- function(x, ...) {
i<-x$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data<-x$get()
i<-solve(data,...)
x$setinverse(i)
i
## Return a matrix that is the inverse of 'x'
}
i <- matrix(c(-1,-2,1,1),2,2)
x<-makeCacheMatrix(i)
x$get()
inv <- cacheSolve(x)
inv
## Put comments here that give an overall description of what your
## functions do
## The makeCacheMatrix creates a special "matrix" object that can
##  cache its inverse.
## The cacheSolve function computes the inverse of the special
##  "matrix".If the inverse has already been calculated (and the
##  matrix has not changed), then the cache solve should retreive
##  the inverse from the cache.
## Basically the function creates a matrix that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<- function(y){
x<<- y
m<<- NULL
}
get <- function()x
setinverse<-function(solve) m <<- inverse
getinverse<-function()m
list(set=set, get=get,
setinverse = setinverse,
getinverse=getinverse)
}
## The cacheSolve function computes the inverse of the special
## "matrix" returned by the makeCacheMatrix function. If the inverse
## has already been calculated, then the function will retrieve
## the inverse from the cache.
cacheSolve <- function(x, ...) {
i<-x$getinverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data<-x$get()
m<-solve(data,...)
x$setinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
m <- matrix(c(-1,-2,1,1), 2, 2)
x<- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
source('~/school/Summer2015/ProgrammingAssignment2/cachematrix.R')
inv <- cacheSolve(x)
m <- matrix(c(-1,-2,1,1), 2, 2)
x<- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
source('~/school/Summer2015/ProgrammingAssignment2/cachematrix.R')
inv <- cacheSolve(x)
source('~/school/Summer2015/ProgrammingAssignment2/cachematrix.R')
inv <- cacheSolve(x)
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
source('~/school/Summer2015/ProgrammingAssignment2/cachematrix.R')
m<-matrix(c(-1,-2,1,1), 2, 2)
x<-makeCacheMatrix(m)
x$get()
inv<-cachSovle(x)
inv<-cacheSolve(x)
inv
inv <-cacheSolve(x)
inv
